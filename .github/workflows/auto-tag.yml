name: Auto Tag

on:
  push:
    branches:
      - main

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # This permission is needed to create and push tags
      packages: write  # This permission is needed for Docker push
      id-token: write  # This is used for signing Docker images
    if: contains(github.event.head_commit.message, '#release')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}  # Use the GitHub token with write permissions

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag or set to v0.0.0 if none exists
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version components
          MAJOR=$(echo $LATEST_TAG | sed 's/v\([0-9]*\)\..*/\1/')
          MINOR=$(echo $LATEST_TAG | sed 's/v[0-9]*\.\([0-9]*\)\..*/\1/')
          PATCH=$(echo $LATEST_TAG | sed 's/v[0-9]*\.[0-9]*\.\([0-9]*\).*/\1/')
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          echo "PATCH=$PATCH" >> $GITHUB_ENV

      - name: Determine version bump
        id: determine_version
        run: |
          # Check commit message for version bump indicators
          if [[ "${{ github.event.head_commit.message }}" == *"#major"* ]]; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
            echo "Bumping major version"
          elif [[ "${{ github.event.head_commit.message }}" == *"#minor"* ]]; then
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$((MINOR + 1))
            NEW_PATCH=0
            echo "Bumping minor version"
          else
            # Default to patch bump
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$MINOR
            NEW_PATCH=$((PATCH + 1))
            echo "Bumping patch version"
          fi
          
          NEW_TAG="v$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "New tag will be: $NEW_TAG"

      - name: Create and push tag
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a ${{ env.NEW_TAG }} -m "Release ${{ env.NEW_TAG }}"
          git push https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git ${{ env.NEW_TAG }}
          echo "Created and pushed tag: ${{ env.NEW_TAG }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: Release ${{ env.NEW_TAG }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Create package visibility as public if it doesn't exist
      - name: Ensure package is public
        run: |
          # Extract the repository owner and name
          REPO_OWNER=$(echo "${{ github.repository }}" | cut -d '/' -f 1 | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2 | tr '[:upper:]' '[:lower:]')
          
          # Check if package exists and set visibility to public if needed
          PACKAGE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/user/packages/container/$REPO_NAME")
          
          if [ "$PACKAGE_EXISTS" = "200" ]; then
            echo "Package exists, ensuring it's public..."
            curl -X PATCH \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"visibility":"public"}' \
              "https://api.github.com/user/packages/container/$REPO_NAME"
          else
            echo "Package doesn't exist yet or couldn't be accessed. It will be created when pushing."
          fi
          
      # Login to GitHub Container Registry
      - name: Log into registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGES_TOKEN }}  # Use a PAT with packages:write scope

      # Build and push Docker image using Docker CLI directly
      - name: Build and push Docker image
        run: |
          # Set image name with registry (ensuring lowercase)
          IMAGE_NAME=ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          
          # Add OpenContainers labels
          echo "Building Docker image with proper labels..."
          docker build \
            --label "org.opencontainers.image.source=https://github.com/${{ github.repository }}" \
            --label "org.opencontainers.image.description=Automatically built from ${{ github.repository }}" \
            --label "org.opencontainers.image.licenses=MIT" \
            -t $IMAGE_NAME:${{ env.NEW_TAG }} \
            -t $IMAGE_NAME:latest \
            .
          
          echo "Pushing Docker image with tag ${{ env.NEW_TAG }}..."
          docker push $IMAGE_NAME:${{ env.NEW_TAG }}
          
          echo "Pushing Docker image with tag latest..."
          docker push $IMAGE_NAME:latest
          
          # Also create major, minor version tags
          MAJOR=$(echo ${{ env.NEW_TAG }} | sed 's/v\([0-9]*\)\..*/\1/')
          MINOR=$(echo ${{ env.NEW_TAG }} | sed 's/v[0-9]*\.\([0-9]*\)\..*/\1/')
          
          echo "Creating and pushing additional version tags..."
          # Tag with major and minor versions
          docker tag $IMAGE_NAME:${{ env.NEW_TAG }} $IMAGE_NAME:$MAJOR
          docker tag $IMAGE_NAME:${{ env.NEW_TAG }} $IMAGE_NAME:$MAJOR.$MINOR
          
          # Push these tags
          docker push $IMAGE_NAME:$MAJOR
          docker push $IMAGE_NAME:$MAJOR.$MINOR
          
          # Output the image digest for signing
          echo "Getting image digest for signing..."
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE_NAME:${{ env.NEW_TAG }} | cut -d'@' -f2)
          echo "Image digest: $DIGEST"
          echo "DIGEST=$DIGEST" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      # Install the cosign tool
      - name: Install cosign
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Sign the Docker image
      - name: Sign the published Docker image
        run: |
          cosign sign --yes ${IMAGE_NAME}@sha256:${DIGEST} 